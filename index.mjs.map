{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.port] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address] - server address\n* @returns {(Error|null)} error or null\n*\n* @example\n* var options = {\n*     'port': 7331,\n*     'address': '127.0.0.1'\n* };\n* var opts = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0kN2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'port' ) ) {\n\t\topts.port = options.port;\n\t\tif ( !isNonNegativeInteger( opts.port ) ) {\n\t\t\treturn new TypeError( format( '0kN2t', 'port', opts.port ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'maxport' ) ) {\n\t\topts.maxport = options.maxport;\n\t\tif ( !isNonNegativeInteger( opts.maxport ) ) {\n\t\t\treturn new TypeError( format( '0kN2t', 'maxport', opts.maxport ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'hostname' ) ) {\n\t\topts.hostname = options.hostname;\n\t\tif ( !isString( opts.hostname ) ) {\n\t\t\treturn new TypeError( format( '0kN2W', 'hostname', opts.hostname ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'address' ) ) {\n\t\topts.address = options.address;\n\t\tif ( !isString( opts.address ) ) {\n\t\t\treturn new TypeError( format( '0kN2W', 'address', opts.address ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar http = require( 'http' );\nvar logger = require( 'debug' );\nimport isFunction from '@stdlib/assert-is-function';\nimport isObject from '@stdlib/assert-is-object';\nimport NODE_VERSION from '@stdlib/process-node-version';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport validate from './validate.js';\nimport DEFAULTS from './defaults.json';\n\n\n// VARIABLES //\n\nvar debug = logger( '@stdlib/net-http-server' );\nvar SUPPORTS_OPTIONS = ( parseInt( NODE_VERSION.split( '.' )[ 0 ], 10 ) >= 8 ); // TODO: this is an imperfect test, as options only added in v8.12.0/v9.6.0\n\n\n// MAIN //\n\n/**\n* Returns a function which creates an HTTP server.\n*\n* @param {Options} [options] - server options\n* @param {NonNegativeInteger} [options.port=0] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address=\"127.0.0.1\"] - server address\n* @param {Callback} [requestListener] - callback invoked upon receiving an HTTP request\n* @throws {TypeError} `requestListener` must be a function\n* @throws {TypeError} must provide valid options\n* @returns {Function} function which creates an HTTP server\n*\n* @example\n* var httpServer = factory();\n*\n* @example\n* var opts = {\n*     'port': 7331,\n*     'address': '0.0.0.0'\n* };\n* var httpServer = factory( opts );\n*\n* @example\n* var opts = {\n*     'port': 7331,\n*     'address': '0.0.0.0'\n* };\n* function onRequest( request, response ) {\n*     console.log( request.url );\n*     response.end( 'OK' );\n* }\n* var httpServer = factory( opts, onRequest );\n*/\nfunction factory() {\n\tvar requestListener;\n\tvar hostname;\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar port;\n\tvar max;\n\tvar err;\n\n\tnargs = arguments.length;\n\topts = {};\n\tif ( nargs === 1 ) {\n\t\tif ( isFunction( arguments[0] ) ) {\n\t\t\trequestListener = arguments[ 0 ];\n\t\t} else {\n\t\t\toptions = arguments[ 0 ];\n\t\t\terr = validate( opts, options );\n\t\t}\n\t} else if ( nargs > 1 ) {\n\t\toptions = arguments[ 0 ];\n\t\trequestListener = arguments[ 1 ];\n\t\tif ( !isFunction( requestListener ) ) {\n\t\t\tthrow new TypeError( format( '0kN5w', requestListener ) );\n\t\t}\n\t\terr = validate( opts, options );\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( opts.port === void 0 ) {\n\t\tport = DEFAULTS.port;\n\t} else {\n\t\tport = opts.port;\n\t}\n\tdebug( 'Server port: %d', port );\n\n\tif ( opts.maxport === void 0 ) {\n\t\tmax = port;\n\t} else {\n\t\tmax = opts.maxport;\n\t}\n\tdebug( 'Max server port: %d', max );\n\n\tif ( opts.hostname ) {\n\t\thostname = opts.hostname;\n\t} else if ( opts.address ) {\n\t\thostname = opts.address;\n\t} else {\n\t\thostname = DEFAULTS.address;\n\t}\n\tdebug( 'Server hostname: %s', hostname );\n\n\treturn httpServer;\n\n\t/**\n\t* Creates an HTTP server.\n\t*\n\t* @private\n\t* @param {Options} [options] - server options\n\t* @param {Callback} done - function to invoke after creating a server\n\t* @throws {TypeError} must provide a function\n\t*\n\t* @example\n\t* function done( error, server ) {\n\t*     if ( error ) {\n\t*         throw error;\n\t*     }\n\t*     console.log( 'Success!' );\n\t*     server.close();\n\t* }\n\t* httpServer( done );\n\t*/\n\tfunction httpServer( options, done ) {\n\t\tvar server;\n\t\tvar nargs;\n\t\tvar opts;\n\t\tvar cb;\n\n\t\tnargs = arguments.length;\n\t\tif ( nargs < 2 ) {\n\t\t\topts = {};\n\t\t\tcb = options;\n\t\t} else {\n\t\t\topts = options;\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( '0kN2V', opts ) );\n\t\t\t}\n\t\t\tcb = done;\n\t\t}\n\t\tif ( !isFunction( cb ) ) {\n\t\t\tthrow new TypeError( format( '0kN2b', cb ) );\n\t\t}\n\t\tif ( requestListener ) {\n\t\t\tif ( SUPPORTS_OPTIONS ) {\n\t\t\t\tserver = http.createServer( opts, requestListener );\n\t\t\t} else {\n\t\t\t\tserver = http.createServer( requestListener );\n\t\t\t}\n\t\t} else if ( SUPPORTS_OPTIONS ) {\n\t\t\tserver = http.createServer( opts );\n\t\t} else {\n\t\t\tserver = http.createServer();\n\t\t}\n\t\tserver.on( 'error', errorListener );\n\t\tserver.once( 'listening', onListen );\n\n\t\tdebug( 'Attempting to listen on %s:%d.', hostname, port );\n\t\tserver.listen( port, hostname );\n\n\t\t/**\n\t\t* Server error event handler.\n\t\t*\n\t\t* @private\n\t\t* @param {Error} error - server error\n\t\t* @throws {Error} server error\n\t\t*/\n\t\tfunction errorListener( error ) {\n\t\t\tif ( error.code === 'EADDRINUSE' ) {\n\t\t\t\tdebug( 'Server address already in use: %s:%d.', hostname, port );\n\t\t\t\tport += 1;\n\t\t\t\tif ( port <= max ) {\n\t\t\t\t\tdebug( 'Attempting to listen on %s:%d.', hostname, port );\n\t\t\t\t\tserver.listen( port, hostname );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\n\t\t/**\n\t\t* Callback invoked once a server is listening and ready to handle requests.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tfunction onListen() {\n\t\t\tvar addr = server.address();\n\t\t\tdebug( 'HTTP server initialized. Server is listening for requests on %s:%d.', addr.address, addr.port );\n\t\t\tcb( null, server );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n"],"names":["validate","opts","options","isObject","hasOwnProp","port","isNonNegativeInteger","TypeError","format","maxport","hostname","isString","address","http","debug","logger","SUPPORTS_OPTIONS","parseInt","NODE_VERSION","split","factory","requestListener","nargs","max","err","arguments","length","isFunction","DEFAULTS","done","server","cb","createServer","on","error","code","listen","once","addr"],"mappings":";;42yEAsDA,SAASA,GAAUC,EAAMC,GACxB,OAAMC,EAAUD,GAGXE,EAAYF,EAAS,UACzBD,EAAKI,KAAOH,EAAQG,MACdC,EAAsBL,EAAKI,OACzB,IAAIE,UAAWC,EAAQ,QAAS,OAAQP,EAAKI,OAGjDD,EAAYF,EAAS,aACzBD,EAAKQ,QAAUP,EAAQO,SACjBH,EAAsBL,EAAKQ,UACzB,IAAIF,UAAWC,EAAQ,QAAS,UAAWP,EAAKQ,UAGpDL,EAAYF,EAAS,cACzBD,EAAKS,SAAWR,EAAQQ,UAClBC,EAAUV,EAAKS,WACb,IAAIH,UAAWC,EAAQ,QAAS,WAAYP,EAAKS,WAGrDN,EAAYF,EAAS,aACzBD,EAAKW,QAAUV,EAAQU,SACjBD,EAAUV,EAAKW,UACb,IAAIL,UAAWC,EAAQ,QAAS,UAAWP,EAAKW,UAGlD,KA1BC,IAAIL,UAAWC,EAAQ,QAASN,GA2BzC,yBC7DIW,uGAYAC,wDAAQC,CAAQ,2BAChBC,GAAqBC,SAAUC,EAAaC,MAAO,KAAO,GAAK,KAAQ,EAuC3E,SAASC,KACR,IAAIC,EACAX,EACAR,EACAoB,EACArB,EACAI,EACAkB,EACAC,EAIJ,GADAvB,EAAO,CAAA,EACQ,KAFfqB,EAAQG,UAAUC,QAGZC,EAAYF,UAAU,IAC1BJ,EAAkBI,UAAW,GAG7BD,EAAMxB,GAAUC,EADhBC,EAAUuB,UAAW,SAGhB,GAAKH,EAAQ,EAAI,CAGvB,GAFApB,EAAUuB,UAAW,IAEfE,EADNN,EAAkBI,UAAW,IAE5B,MAAM,IAAIlB,UAAWC,EAAQ,QAASa,IAEvCG,EAAMxB,GAAUC,EAAMC,EACtB,CACD,GAAKsB,EACJ,MAAMA,EAyBP,OAlBAV,GAAO,kBAJNT,OADkB,IAAdJ,EAAKI,KACFuB,GAEA3B,EAAKI,MASbS,GAAO,sBAJNS,OADqB,IAAjBtB,EAAKQ,QACHJ,EAEAJ,EAAKQ,SAWZK,GAAO,sBANNJ,EADIT,EAAKS,SACET,EAAKS,SACLT,EAAKW,QACLX,EAAKW,QAELgB,IAwBZ,SAAqB1B,EAAS2B,GAC7B,IAAIC,EACAR,EACArB,EACA8B,EAGJ,GADAT,EAAQG,UAAUC,OACbJ,EAAQ,EACZrB,EAAO,CAAA,EACP8B,EAAK7B,MACC,CAEN,IAAMC,EADNF,EAAOC,GAEN,MAAM,IAAIK,UAAWC,EAAQ,QAASP,IAEvC8B,EAAKF,CACL,CACD,IAAMF,EAAYI,GACjB,MAAM,IAAIxB,UAAWC,EAAQ,QAASuB,IAIrCD,EAFGT,EACCL,GACKH,GAAKmB,aAAc/B,EAAMoB,GAEzBR,GAAKmB,aAAcX,GAElBL,GACFH,GAAKmB,aAAc/B,GAEnBY,GAAKmB,eAEfF,EAAOG,GAAI,SAaX,SAAwBC,GACvB,GAAoB,eAAfA,EAAMC,OACVrB,GAAO,wCAAyCJ,EAAUL,IAC1DA,GAAQ,IACKkB,GAGZ,OAFAT,GAAO,iCAAkCJ,EAAUL,QACnDyB,EAAOM,OAAQ/B,EAAMK,GAIvB,MAAMwB,CACN,IAvBDJ,EAAOO,KAAM,aA8Bb,WACC,IAAIC,EAAOR,EAAOlB,UAClBE,GAAO,sEAAuEwB,EAAK1B,QAAS0B,EAAKjC,MACjG0B,EAAI,KAAMD,EACV,IAhCDhB,GAAO,iCAAkCJ,EAAUL,GACnDyB,EAAOM,OAAQ/B,EAAMK,EAgCrB,CACF"}