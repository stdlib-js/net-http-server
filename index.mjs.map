{"version":3,"file":"index.mjs","sources":["../node_modules/debug/src/index.js","../lib/validate.js","../lib/server.js","../lib/index.js"],"sourcesContent":["/**\n * Detect Electron renderer process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process !== 'undefined' && process.type === 'renderer') {\n  module.exports = require('./browser.js');\n} else {\n  module.exports = require('./node.js');\n}\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.port] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address] - server address\n* @returns {(Error|null)} error or null\n*\n* @example\n* var options = {\n*     'port': 7331,\n*     'address': '127.0.0.1'\n* };\n* var opts = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'port' ) ) {\n\t\topts.port = options.port;\n\t\tif ( !isNonNegativeInteger( opts.port ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` must be a nonnegative integer. Option: `%s`.', 'port', opts.port ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'maxport' ) ) {\n\t\topts.maxport = options.maxport;\n\t\tif ( !isNonNegativeInteger( opts.maxport ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'maxport', opts.maxport ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'hostname' ) ) {\n\t\topts.hostname = options.hostname;\n\t\tif ( !isString( opts.hostname ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'hostname', opts.hostname ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'address' ) ) {\n\t\topts.address = options.address;\n\t\tif ( !isString( opts.address ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'address', opts.address ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar http = require( 'http' );\nvar logger = require( 'debug' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\nvar DEFAULTS = require( './defaults.json' );\n\n\n// VARIABLES //\n\nvar debug = logger( '@stdlib/net-http-server');\n\n\n// MAIN //\n\n/**\n* Returns a function which creates an HTTP server.\n*\n* @param {Options} [options] - server options\n* @param {NonNegativeInteger} [options.port=0] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address=\"127.0.0.1\"] - server address\n* @param {Callback} [requestListener] - callback invoked upon receiving an HTTP request\n* @throws {TypeError} `requestListener` must be a function\n* @throws {TypeError} must provide valid options\n* @returns {Function} function which creates an HTTP server\n*\n* @example\n* var createServer = httpServer();\n*\n* @example\n* var opts = {\n*     'port': 7331,\n*     'address': '0.0.0.0'\n* };\n* var createServer = httpServer( opts );\n*\n* @example\n* var opts = {\n*     'port': 7331,\n*     'address': '0.0.0.0'\n* };\n* function onRequest( request, response ) {\n*     console.log( request.url );\n*     response.end( 'OK' );\n* }\n* var createServer = httpServer( opts, onRequest );\n*/\nfunction httpServer() {\n\tvar requestListener;\n\tvar hostname;\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar port;\n\tvar max;\n\tvar err;\n\n\tnargs = arguments.length;\n\topts = {};\n\tif ( nargs === 1 ) {\n\t\tif ( isFunction( arguments[0] )) {\n\t\t\trequestListener = arguments[ 0 ];\n\t\t} else {\n\t\t\toptions = arguments[ 0 ];\n\t\t\terr = validate( opts, options );\n\t\t}\n\t}\n\telse if ( nargs > 1 ) {\n\t\toptions = arguments[ 0 ];\n\t\trequestListener = arguments[ 1 ];\n\t\tif ( !isFunction( requestListener ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Request listener must be a function. Value: `%s`.', requestListener ) );\n\t\t}\n\t\terr = validate( opts, options );\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( opts.port === void 0 ) {\n\t\tport = DEFAULTS.port;\n\t} else {\n\t\tport = opts.port;\n\t}\n\tdebug( 'Server port: %d', port );\n\n\tif ( opts.maxport === void 0 ) {\n\t\tmax = port;\n\t} else {\n\t\tmax = opts.maxport;\n\t}\n\tdebug( 'Max server port: %d', max );\n\n\tif ( opts.hostname ) {\n\t\thostname = opts.hostname;\n\t}\n\telse if ( opts.address ) {\n\t\thostname = opts.address;\n\t}\n\telse {\n\t\thostname = DEFAULTS.address;\n\t}\n\tdebug( 'Server hostname: %s', hostname );\n\n\treturn createServer;\n\n\t/**\n\t* Creates an HTTP server.\n\t*\n\t* @private\n\t* @param {Callback} done - function to invoke after creating a server\n\t* @throws {TypeError} must provide a function\n\t*\n\t* @example\n\t* function done( error, server ) {\n\t*     if ( error ) {\n\t*         throw error;\n\t*     }\n\t*     console.log( 'Success!' );\n\t*     server.close();\n\t* }\n\t* createServer( done );\n\t*/\n\tfunction createServer( done ) {\n\t\tvar server;\n\t\tif ( !isFunction( done ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback must be a function. Value: `%s`.', done ) );\n\t\t}\n\t\tif ( requestListener ) {\n\t\t\tserver = http.createServer( requestListener );\n\t\t} else {\n\t\t\tserver = http.createServer();\n\t\t}\n\t\tserver.on( 'error', errorListener );\n\t\tserver.once( 'listening', onListen );\n\n\t\tdebug( 'Attempting to listen on %s:%d.', hostname, port );\n\t\tserver.listen( port, hostname );\n\n\t\t/**\n\t\t* Server error event handler.\n\t\t*\n\t\t* @private\n\t\t* @param {Error} error - server error\n\t\t* @throws {Error} server error\n\t\t*/\n\t\tfunction errorListener( error ) {\n\t\t\tif ( error.code === 'EADDRINUSE' ) {\n\t\t\t\tdebug( 'Server address already in use: %s:%d.', hostname, port );\n\t\t\t\tport += 1;\n\t\t\t\tif ( port <= max ) {\n\t\t\t\t\tdebug( 'Attempting to listen on %s:%d.', hostname, port );\n\t\t\t\t\tserver.listen( port, hostname );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\n\t\t/**\n\t\t* Callback invoked once a server is listening and ready to handle requests.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tfunction onListen() {\n\t\t\tvar addr = server.address();\n\t\t\tdebug( 'HTTP server initialized. Server is listening for requests on %s:%d.', addr.address, addr.port );\n\t\t\tdone( null, server );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = httpServer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an HTTP server.\n*\n* @module @stdlib/net-http-server\n*\n* @example\n* var httpServer = require( '@stdlib/net-http-server' );\n*\n* var opts = {\n*     'port': 7331,\n*    'address': '0.0.0.0'\n* };\n* function done( error, server ) {\n*    if ( error ) {\n*        throw error;\n*    }\n*    console.log( 'Success!' );\n*    server.close();\n* }\n* var createServer = httpServer( opts );\n* createServer( done );\n*/\n\n// MODULES //\n\nvar httpServer = require( './server.js' );\n\n\n// EXPORTS //\n\nmodule.exports = httpServer;\n"],"names":["process","type","module","exports","require","isNonNegativeInteger","require$$0","isPrimitive","isString","require$$1","isObject","require$$2","hasOwnProp","require$$3","format","require$$4","http","isFunction","validate","opts","options","port","TypeError","maxport","hostname","address","DEFAULTS","debug","server","requestListener","nargs","max","err","arguments","length","createServer","done","on","error","code","listen","once","addr","lib"],"mappings":";;u4xEAKuB,IAAZA,IAA4C,aAAjBA,GAAQC,KAC5CC,OAAOC,QAAUC,QAAQ,gBAEzBF,OAAOC,QAAUC,QAAQ,uDCcvBC,GAAuBC,EAAmDC,YAC1EC,GAAWC,EAAsCF,YACjDG,GAAWC,EACXC,GAAaC,EACbC,GAASC,EA8Db,IClEIC,GAAOV,GAEPW,GAAaN,EACbG,GAASD,EACTK,GD4BJ,SAAmBC,EAAMC,GACxB,OAAMV,GAAUU,GAGXR,GAAYQ,EAAS,UACzBD,EAAKE,KAAOD,EAAQC,MACdhB,GAAsBc,EAAKE,OACzB,IAAIC,UAAWR,GAAQ,oEAAqE,OAAQK,EAAKE,OAG7GT,GAAYQ,EAAS,aACzBD,EAAKI,QAAUH,EAAQG,SACjBlB,GAAsBc,EAAKI,UACzB,IAAID,UAAWR,GAAQ,2EAA4E,UAAWK,EAAKI,UAGvHX,GAAYQ,EAAS,cACzBD,EAAKK,SAAWJ,EAAQI,UAClBhB,GAAUW,EAAKK,WACb,IAAIF,UAAWR,GAAQ,8DAA+D,WAAYK,EAAKK,WAG3GZ,GAAYQ,EAAS,aACzBD,EAAKM,QAAUL,EAAQK,SACjBjB,GAAUW,EAAKM,UACb,IAAIH,UAAWR,GAAQ,8DAA+D,UAAWK,EAAKM,UAGxG,KA1BC,IAAIH,UAAWR,GAAQ,qEAAsEM,KC7BlGM,gCAKAC,GATSlB,GASO,2BAsKpB,IAAAmB,GA/HA,WACC,IAAIC,EACAL,EACAJ,EACAU,EACAX,EACAE,EACAU,EACAC,EAIJ,GADAb,EAAO,GACQ,KAFfW,EAAQG,UAAUC,QAGZjB,GAAYgB,UAAU,IAC1BJ,EAAkBI,UAAW,GAG7BD,EAAMd,GAAUC,EADhBC,EAAUa,UAAW,SAIlB,GAAKH,EAAQ,EAAI,CAGrB,GAFAV,EAAUa,UAAW,IAEfhB,GADNY,EAAkBI,UAAW,IAE5B,MAAM,IAAIX,UAAWR,GAAQ,sEAAuEe,IAErGG,EAAMd,GAAUC,EAAMC,GAEvB,GAAKY,EACJ,MAAMA,EA2BP,OAxBCX,OADkB,IAAdF,EAAKE,KACFK,GAASL,KAETF,EAAKE,KAEbM,GAAO,kBAAmBN,GAGzBU,OADqB,IAAjBZ,EAAKI,QACHF,EAEAF,EAAKI,QAEZI,GAAO,sBAAuBI,GAG7BP,EADIL,EAAKK,SACEL,EAAKK,SAEPL,EAAKM,QACHN,EAAKM,QAGLC,GAASD,QAErBE,GAAO,sBAAuBH,GAEvBW,EAmBP,SAASA,EAAcC,GACtB,IAAIR,EACJ,IAAMX,GAAYmB,GACjB,MAAM,IAAId,UAAWR,GAAQ,8DAA+DsB,KAG5FR,EADIC,EACKb,GAAKmB,aAAcN,GAEnBb,GAAKmB,gBAERE,GAAI,SAaX,SAAwBC,GACvB,GAAoB,eAAfA,EAAMC,OACVZ,GAAO,wCAAyCH,EAAUH,IAC1DA,GAAQ,IACKU,GAGZ,OAFAJ,GAAO,iCAAkCH,EAAUH,QACnDO,EAAOY,OAAQnB,EAAMG,GAIvB,MAAMc,KAtBPV,EAAOa,KAAM,aA8Bb,WACC,IAAIC,EAAOd,EAAOH,UAClBE,GAAO,sEAAuEe,EAAKjB,QAASiB,EAAKrB,MACjGe,EAAM,KAAMR,MA/BbD,GAAO,iCAAkCH,EAAUH,GACnDO,EAAOY,OAAQnB,EAAMG,KC9GvBmB,GALiBrC"}